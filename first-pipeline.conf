input {
   file {
        type => "javaStackTrace"
        path => ["/home/anshul/log/catalina.2018-05-04.log"]
        start_position => "beginning"
        sincedb_path => "/dev/null"     
  } 
}
filter {
  if [type] == "javaStackTrace" {
    grok {
      patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
      # check if the log line contains a date 
      match => [ "message", "%{MYTIME:logTime} %{LOGLEVEL:logLevel} \[%{CUSTOM:main}\] %{JAVACLASS:class} %{EVERYTHING:logmsg}" ]
      add_field => { "subType" => "timestamp" }
      remove_tag => ["_grokparsefailure"]
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
        # check if the log line is has 'caused by'
        match => { "message" => "%{CUSTOM_TRACE_CAUSED_BY:causedbyText} %{GREEDYDATA:messageText}" }
        add_field => { "subType" => "cause" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
        # check if the log line is an error trace
        match => { "message" => "%{CUSTOM_TRACE_ERROR:errorTrace} %{GREEDYDATA:messageText}" }
        add_field => { "subType" => "errorTrace" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
        # check if the log line is a message
        match => { "message" => "%{CUSTOM_WARNINGLEVEL:warningLevel} %{GREEDYDATA:messageText}" }
        add_field => { "subType" => "warning" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/pattern"
        # check if the log line is an exception
        match => { "message" => "%{CUSTOM_TRACE_EXCEPTION:exceptionText} %{GREEDYDATA:messageText}" }
        match => { "message" => "%{CUSTOM_TRACE_EXCEPTION:exceptionText}" }
        add_field => { "subType" => "exception" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
        # check if the log line is part of earlier 'exception' or 'caused by'
        match => { "message" => "%{CUSTOM_TRACE_OTHERS:messageText}" }
        add_field => { "subType" => "continuation" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        patterns_dir => "/home/anshul/Downloads/logstash-6.2.4/patterns"
        # parse all other lines as 'unrecognizedText' so that it is not lost after parsing
        match => { "message" => "%{GREEDYDATA:unrecognizedText}" }
        add_field => { "subType" => "unrecognizedText" }
        remove_tag => ["_grokparsefailure"]
      }
    }
    mutate {
      gsub => ['message', "\t", " "]
      gsub => ['catalinaLog', "\t", " "]
      gsub => ['messageText', "\t", " "]
      gsub => ['exceptionText', "\t", " "]
      gsub => ['errorTrace', "\t", " "]
      gsub => ['unrecognizedText', "\t", " "]
    }
  }
}
output {
  if "_grokparsefailure" not in [tags] {
#    stdout { codec => "rubydebug" }
     elasticsearch {
     hosts => ["localhost:9200"]
     user => elastic
     password => elastic
     manage_template => false
     index => "javastacktrace-%{+YYYY.MM.dd}"
  }
}
}
